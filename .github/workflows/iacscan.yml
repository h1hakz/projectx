name: IaC Scan and PR Comment

on:
  pull_request:
    branches:
      - main # Or your default branch

permissions:
  contents: read      # To checkout the code
  pull-requests: write # To post comments on the PR

jobs:
  checkov-scan:
    name: Scan IaC with Checkov
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # Scan the entire repository
          directory: ./
          # Do not fail the step here, as we want to comment first. We will fail it later.
          soft_fail: true
          # Output results in SARIF format for easier processing
          output_format: sarif
          output_file_path: "checkov_results.sarif"
          
      - name: Count Critical Issues
        id: count_criticals
        run: |
          # Use 'jq' to parse the SARIF file and count results with level "error" (which maps to Critical/High)
          CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' checkov_results.sarif)
          echo "Found $CRITICAL_COUNT critical issues."
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

      - name: Post PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const sarif = JSON.parse(fs.readFileSync('checkov_results.sarif', 'utf8'));
            const results = sarif.runs[0].results;
            
            let commentBody = `### 🛡️ Checkov IaC Scan Results\n\n`;
            
            if (results.length === 0) {
              commentBody += '✅ No issues found.';
            } else {
              const criticals = results.filter(r => r.level === 'error');
              const others = results.filter(r => r.level !== 'error');
              
              commentBody += `**Summary:** Found ${results.length} total issues.\n`;
              commentBody += `- **${criticals.length} Critical/High**\n`;
              commentBody += `- **${others.length} Medium/Low**\n\n`;
              
              // List critical issues
              if (criticals.length > 0) {
                commentBody += `#### 🚨 Critical Issues to Fix:\n`;
                for (const result of criticals) {
                  const ruleId = result.ruleId;
                  const location = result.locations[0].physicalLocation.artifactLocation.uri;
                  const line = result.locations[0].physicalLocation.region.startLine;
                  commentBody += `- **${ruleId}**: ${result.message.text} (in \`${location}\` on line ${line})\n`;
                }
              }
            }
            
            // Post the comment to the PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Fail on Critical Issues
        if: steps.count_criticals.outputs.critical_count > 0
        run: |
          echo "Failing the workflow because ${CRITICAL_COUNT} critical issues were found."
          exit 1
