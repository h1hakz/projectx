name: IaC Scan with Checkov

# This workflow runs on pull requests targeting the main branch
on:
  pull_request:
    branches:
      - main

# Permissions are required to read code and write PR comments
permissions:
  contents: read
  pull-requests: write

jobs:
  checkov-scan:
    name: Scan, Process, and Comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find Terraform Directory
        id: find_tf_dir
        run: |
          TF_DIR=$(find . -type f -name "*.tf" -not -path "*/.terraform/*" -not -path "./.github/*" -printf '%h\n' | sort -u | head -n 1)
          if [ -z "$TF_DIR" ]; then echo "tf_directory=" >> $GITHUB_OUTPUT; else echo "tf_directory=$TF_DIR" >> $GITHUB_OUTPUT; fi

      - name: Setup Python and Install Checkov
        if: steps.find_tf_dir.outputs.tf_directory != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - run: pip install checkov gh-cli
        if: steps.find_tf_dir.outputs.tf_directory != ''

      # --- FINAL ROBUST SCRIPT STEP ---
      - name: Run Scan, Process Results, and Comment
        if: steps.find_tf_dir.outputs.tf_directory != ''
        run: |
          # Use checkov's native file output flag '-o' to create a clean SARIF file
          checkov -d ${{ steps.find_tf_dir.outputs.tf_directory }} --framework terraform --soft-fail --quiet --output sarif -o results.sarif

          # Verify the file was created before proceeding
          if [ ! -f "results.sarif" ]; then
            echo "Error: Checkov failed to create the results.sarif file."
            exit 1
          fi

          # Count critical issues by reading from the file
          CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' results.sarif)
          echo "Found $CRITICAL_COUNT critical issues."

          # Build the main body of the PR comment
          COMMENT_BODY="### üõ°Ô∏è Checkov IaC Scan Results\n\n"
          TOTAL_ISSUES=$(jq '[.runs[].results[]] | length' results.sarif)

          if [ "$TOTAL_ISSUES" -eq 0 ]; then
            COMMENT_BODY+="‚úÖ No security or misconfiguration issues found."
          else
            OTHERS_COUNT=$((TOTAL_ISSUES - CRITICAL_COUNT))
            COMMENT_BODY+="**Summary:** Found $TOTAL_ISSUES total issues.\n"
            COMMENT_BODY+="- **$CRITICAL_COUNT Critical/High**\n"
            COMMENT_BODY+="- **$OTHERS_COUNT Medium/Low**\n\n"

            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              COMMENT_BODY+="#### üö® Critical Issues to Address:\n"
              # Use jq to format the critical issues into a markdown list directly from the file
              CRITICAL_DETAILS=$(jq -r '.runs[].results[] | select(.level == "error") | "- **\(.ruleId)**: \(.message.text) (in `\(.locations[0].physicalLocation.artifactLocation.uri)` on line **\(.locations[0].physicalLocation.region.startLine)**)\n"' results.sarif)
              COMMENT_BODY+="$CRITICAL_DETAILS"
            else
              COMMENT_BODY+="‚úÖ No critical issues found."
            fi
          fi

          # Post the comment to the PR using the GitHub CLI
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"

          # Finally, fail the step if critical issues were found
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "Failing the workflow because critical issues were found."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notify Scan Skipped
        if: steps.find_tf_dir.outputs.tf_directory == ''
        run: echo "Skipping Checkov scan because no Terraform files were found."
