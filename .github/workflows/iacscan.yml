name: IaC Scan and PR Comment

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read      # To checkout the code
  pull-requests: write # To post comments on the PR

jobs:
  checkov-scan:
    name: Scan IaC with Checkov
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # Be specific about what you want to scan
          directory: ./terraform  # CHANGE THIS to your IaC directory
          framework: terraform    # ADD THIS line to specify the framework
          
          soft_fail: true
          output_format: sarif
          output_file_path: "results.sarif"
          
      # --- DEBUGGING STEPS (You can remove these later) ---
      - name: 🔎 Verify SARIF file was created
        run: |
          echo "Listing files in the workspace..."
          ls -l
          
      - name: 📄 View SARIF file content
        run: |
          echo "Displaying the first 10 lines of the results file..."
          cat results.sarif | head -n 10
      # --- END DEBUGGING STEPS ---

      - name: Count Critical Issues
        id: count_criticals
        run: |
          # Ensure you use the same filename as in the checkov step
          CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' results.sarif)
          echo "Found $CRITICAL_COUNT critical issues."
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

      - name: Post PR Comment
        # This step depends on the SARIF file being correct
        if: always() # Run this step even if previous steps fail
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // Use the same filename here
            const sarifPath = 'results.sarif';
            
            let commentBody = `### 🛡️ Checkov IaC Scan Results\n\n`;
            
            if (!fs.existsSync(sarifPath)) {
              commentBody += '❌ **Error:** SARIF results file not found.';
            } else {
              const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
              // Your script to parse and format the comment...
              // (The rest of your script from the previous example goes here)
              const results = sarif.runs[0].results;
              const criticals = results.filter(r => r.level === 'error');
              commentBody += `**Summary:** Found ${results.length} total issues, including **${criticals.length} Critical/High**.\n\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Fail on Critical Issues
        if: steps.count_criticals.outputs.critical_count > 0
        run: |
          echo "Failing the workflow because critical issues were found."
          exit 1
