name: IaC Scan with Checkov

# This workflow runs on pull requests targeting the main branch
on:
  pull_request:
    branches:
      - main

# These permissions are required for the action to read code and post PR comments
permissions:
  contents: read
  pull-requests: write

jobs:
  checkov-scan:
    name: Scan IaC and Comment on PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find Terraform Directory
        id: find_tf_dir
        run: |
          TF_DIR=$(find . -type f -name "*.tf" -not -path "*/.terraform/*" -not -path "./.github/*" -printf '%h\n' | sort -u | head -n 1)
          if [ -z "$TF_DIR" ]; then echo "tf_directory=" >> $GITHUB_OUTPUT; else echo "tf_directory=$TF_DIR" >> $GITHUB_OUTPUT; fi

      - name: Run Checkov Scan
        if: steps.find_tf_dir.outputs.tf_directory != ''
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ steps.find_tf_dir.outputs.tf_directory }}
          framework: terraform
          soft_fail: true
          output_format: sarif
          # This will now be treated as the output directory
          output_file_path: "results.sarif"

      - name: 🕵️ List Contents of Results Directory
        if: steps.checkov.outcome == 'success'
        run: |
          echo "Listing files inside the 'results.sarif' directory:"
          ls -l results.sarif

      - name: Count Critical Issues
        if: steps.checkov.outcome == 'success'
        id: count_criticals
         run: |
          # Use the filename you found in the previous step
          SARIF_FILE_PATH="results.sarif/terraform.sarif"
          
          if [ ! -f "$SARIF_FILE_PATH" ]; then
            echo "Error: SARIF file not found at $SARIF_FILE_PATH"
            exit 1
          fi
          
          CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' "$SARIF_FILE_PATH")
          echo "Found $CRITICAL_COUNT critical issues."
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

      - name: Post PR Comment
        if: steps.checkov.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // Use the filename you found in the previous step
            const sarifPath = 'results.sarif/terraform.sarif';
            
            if (!fs.existsSync(sarifPath)) {
              // Handle case where file doesn't exist
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '### 🛡️ Checkov IaC Scan Results\n\n❌ Error: Could not find the SARIF results file to generate a report.'
              });
              return;
            }

            const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
            // ... (The rest of your comment script remains the same)
            const results = sarif.runs[0].results;
            let commentBody = `### 🛡️ Checkov IaC Scan Results\n\n`;
            if (results.length === 0) {
              commentBody += '✅ No security or misconfiguration issues found.';
            } else {
              const criticals = results.filter(r => r.level === 'error');
              const others = results.filter(r => r.level !== 'error');
              commentBody += `**Summary:** Found ${results.length} total issues.\n`;
              commentBody += `- **${criticals.length} Critical/High**\n`;
              commentBody += `- **${others.length} Medium/Low**\n\n`;
              if (criticals.length > 0) {
                commentBody += `#### 🚨 Critical Issues to Address:\n`;
                for (const result of criticals) {
                  const ruleId = result.ruleId;
                  const location = result.locations[0].physicalLocation.artifactLocation.uri;
                  const line = result.locations[0].physicalLocation.region.startLine;
                  commentBody += `- **${ruleId}**: ${result.message.text} (in \`${location}\` on line **${line}**)\n`;
                }
              } else {
                commentBody += '✅ No critical issues found.';
              }
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      # ... (The rest of your steps for failing and skipping)

      - name: Fail on Critical Issues
        # This step fails the workflow if the count of critical issues is greater than 0
        if: steps.count_criticals.outputs.critical_count > 0
        run: |
          echo "Failing the workflow because critical issues were found."
          exit 1
          
      - name: Notify Scan Skipped
        # This step only runs if no Terraform directory was found in the first place
        if: steps.find_tf_dir.outputs.tf_directory == ''
        run: echo "Skipping Checkov scan because no Terraform files were found."
