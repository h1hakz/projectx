name: trivy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '40 5 * * 2'  # Every Tuesday at 05:40 UTC

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    permissions:
      contents: read
      security-events: write
      actions: read
    name: Build and Scan
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Find Dockerfile automatically
      - name: Find Dockerfile
        id: find_dockerfile
        run: |
          FILE=$(find . -type f -name 'Dockerfile' | head -n 1)
          if [ -z "$FILE" ]; then
            echo "dockerfile_found=false" >> $GITHUB_OUTPUT
          else
            DIR=$(dirname "$FILE")
            echo "dockerfile_found=true" >> $GITHUB_OUTPUT
            echo "dockerfile=$FILE" >> $GITHUB_OUTPUT
            echo "context=$DIR" >> $GITHUB_OUTPUT
          fi

      # 3Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        if: steps.find_dockerfile.outputs.dockerfile_found == 'true'
        run: |
          echo "Building Docker image from ${{ steps.find_dockerfile.outputs.dockerfile }} ..."
          docker build \
            -t my-app:${{ github.sha }} \
            -f "${{ steps.find_dockerfile.outputs.dockerfile }}" \
            "${{ steps.find_dockerfile.outputs.context }}"

      # 4Ô∏è‚É£ Install Trivy CLI
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # 5Ô∏è‚É£ Run Trivy vulnerability scan (Docker)
      - name: Run Trivy scanner (Image)
        if: steps.find_dockerfile.outputs.dockerfile_found == 'true'
        id: image_scan
        run: |
          trivy image --severity CRITICAL,HIGH --format json --vuln-type os,library my-app:${{ github.sha }} > trivy-image.json || true

          count=$(jq '.Results[].Vulnerabilities | length' trivy-image.json 2>/dev/null | awk '{s+=$1} END {print s+0}')
          if [ "$count" -gt 0 ]; then
            summary="$count issues"
            details=$(jq -r '.Results[].Vulnerabilities[] | "\(.VulnerabilityID) - \(.PkgName)@\(.InstalledVersion)"' trivy-image.json | head -5)
          else
            summary="No issues"
            details=""
          fi
          echo "summary=$summary" >> $GITHUB_OUTPUT
          echo "details<<EOF" >> $GITHUB_OUTPUT
          echo "$details" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Run Trivy Terraform scan
      - name: Run Trivy scanner (Terraform IaC)
        id: tf_scan
        run: |
          trivy config --severity CRITICAL,HIGH --format json . > trivy-tf.json || true

          count=$(jq '.Results[].Misconfigurations | length' trivy-tf.json 2>/dev/null | awk '{s+=$1} END {print s+0}')
          if [ "$count" -gt 0 ]; then
            summary="$count issues"
            details=$(jq -r '.Results[].Misconfigurations[] | "\(.ID) - \(.Message)"' trivy-tf.json | head -5)
          else
            summary="No issues"
            details=""
          fi
          echo "summary=$summary" >> $GITHUB_OUTPUT
          echo "details<<EOF" >> $GITHUB_OUTPUT
          echo "$details" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Comment concise results on PR
      - name: Comment results
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üõ°Ô∏è **Trivy Scan Results**

            **Docker Image**
            - Summary: **${{ steps.image_scan.outputs.summary }}**
            ```
            ${{ steps.image_scan.outputs.details }}
            ```

            **Terraform IaC**
            - Summary: **${{ steps.tf_scan.outputs.summary }}**
            ```
            ${{ steps.tf_scan.outputs.details }}
            ```
